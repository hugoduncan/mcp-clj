{"design" {"transport_type" "in-memory", "description" "In-memory transport for unit testing MCP client/server communication within same JVM", "architecture" {"shared_state" "Transport pair shares concurrent queues for bidirectional communication", "queues" {"client_to_server" "java.util.concurrent.LinkedBlockingQueue for client->server messages", "server_to_client" "java.util.concurrent.LinkedBlockingQueue for server->client messages"}, "components" {"client_transport" "Implements mcp-clj.client-transport.protocol/Transport", "server_factory" "Registered transport factory for server-side", "shared_transport" "Contains the queue pair and coordination logic"}}, "key_features" {"synchronous" "No network latency, deterministic for testing", "lifecycle" "Proper close/cleanup with alive status tracking", "error_handling" "Simulate network failures if needed for testing", "json_rpc" "Follows same JSON-RPC message patterns as other transports"}, "usage_pattern" {"create_shared" "Create shared transport state first", "client_config" "{:transport {:type :in-memory :shared shared-transport}}", "server_config" "{:transport {:type :in-memory :shared shared-transport}}"}}}